import { PermissionFlagsBits, EmbedBuilder } from 'discord.js';
import { isWhitelisted } from './whitelist.js';

export async function handleRenewCommand(message) {
  // V√©rifie si l'utilisateur est whitelist√©
  if (!isWhitelisted(message.guild.id, message.author.id)) {
    return message.reply('Vous n\'avez pas la permission d\'utiliser cette commande.');
  }

  // V√©rifie les permissions du bot
  if (!message.guild.members.me.permissions.has(PermissionFlagsBits.ManageChannels)) {
    return message.reply('Je n\'ai pas la permission de g√©rer les salons.');
  }

  try {
    // R√©cup√®re le salon mentionn√© ou utilise le salon actuel
    const channel = message.mentions.channels.first() || message.channel;
    
    // V√©rifie que c'est un salon textuel
    if (channel.type !== 0) { // 0 = GUILD_TEXT
      return message.reply('Cette commande ne fonctionne qu\'avec les salons textuels.');
    }

    // Sauvegarde les informations du salon
    const channelInfo = {
      name: channel.name,
      topic: channel.topic,
      nsfw: channel.nsfw,
      parent: channel.parent,
      permissionOverwrites: channel.permissionOverwrites.cache,
      position: channel.position,
      rateLimitPerUser: channel.rateLimitPerUser
    };

    // Cr√©e un embed pour informer de la suppression
    const deleteEmbed = new EmbedBuilder()
      .setTitle('üîÑ Renouvellement du salon')
      .setDescription('Le salon va √™tre supprim√© et recr√©√© dans quelques secondes...')
      .setColor('#2b2d31')
      .setTimestamp();

    await message.channel.send({ embeds: [deleteEmbed] });

    // Supprime le salon
    await channel.delete();

    // Recr√©e le salon avec les m√™mes param√®tres
    const newChannel = await message.guild.channels.create({
      name: channelInfo.name,
      type: 0,
      topic: channelInfo.topic,
      nsfw: channelInfo.nsfw,
      parent: channelInfo.parent,
      permissionOverwrites: Array.from(channelInfo.permissionOverwrites.values()),
      position: channelInfo.position,
      rateLimitPerUser: channelInfo.rateLimitPerUser
    });

    // Cr√©e un embed pour confirmer la recr√©ation
    const successEmbed = new EmbedBuilder()
      .setTitle('‚úÖ Salon renouvel√©')
      .setDescription(`Le salon a √©t√© recr√©√© avec succ√®s : ${newChannel}`)
      .setColor('#2b2d31')
      .setTimestamp();

    // Si le salon renouvel√© √©tait le salon o√π la commande a √©t√© ex√©cut√©e,
    // envoie le message dans le nouveau salon
    if (channel.id === message.channel.id) {
      await newChannel.send({ embeds: [successEmbed] });
    } else {
      // Sinon, envoie le message dans le salon o√π la commande a √©t√© ex√©cut√©e
      await message.channel.send({ embeds: [successEmbed] });
    }
  } catch (error) {
    console.error('Erreur lors du renouvellement du salon:', error);
    await message.reply('Une erreur est survenue lors du renouvellement du salon.');
  }
}